#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

class ShapeAnalyzer {
public:
    ShapeAnalyzer(const std::string& filename) : filename_(filename) {}

    void ReadData() {
        std::ifstream file(filename_);
        if (!file.is_open()) {
            std::cerr << "Error: Unable to open file." << std::endl;
            return;
        }

        std::string line;
        while (std::getline(file, line)) {
            if (line == "PTS") {
                ReadPoints(file);
            } else if (line == "CON") {
                ReadConnections(file);
            }
        }

        file.close();
    }

    double CalculateArea(const std::vector<std::pair<int, int>>& shape) {
        double area = 0.0;
        int n = shape.size();

        for (int i = 0; i < n; ++i) {
            int x1 = shape[i].first;
            int y1 = shape[i].second;
            int x2 = shape[(i + 1) % n].first;
            int y2 = shape[(i + 1) % n].second;

            area += (x1 * y2 - x2 * y1);
        }

        return std::abs(area) / 2.0;
    }

    double CalculateLargestArea() {
        double maxArea = 0.0;

        for (const std::vector<int>& connection : connections_) {
            std::vector<std::pair<int, int>> shape;
            for (int pointIndex : connection) {
                shape.push_back(points_[pointIndex - 1]);
            }

            double area = CalculateArea(shape);
            maxArea = std::max(maxArea, area);
        }

        return maxArea;
    }

    int FindPointToRemoveForLargestArea() {
        double largestArea = CalculateLargestArea();
        int pointToRemove = -1;

        for (int i = 0; i < static_cast<int>(points_.size()); ++i) {
            std::vector<std::pair<int, int>> tempPoints = points_;
            tempPoints.erase(tempPoints.begin() + i);

            double areaWithoutPoint = CalculateLargestArea();
            if (areaWithoutPoint > largestArea) {
                largestArea = areaWithoutPoint;
                pointToRemove = i + 1; // Convert to 1-based index
            }
        }

        return pointToRemove;
    }

    std::pair<int, int> CalculateEquidistantPoint() {
        double centerX = 0.0;
        double centerY = 0.0;

        for (const auto& point : points_) {
            centerX += point.first;
            centerY += point.second;
        }

        centerX /= points_.size();
        centerY /= points_.size();

        return {static_cast<int>(std::round(centerX)), static_cast<int>(std::round(centerY))};
    }

private:
    void ReadPoints(std::ifstream& file) {
        points_.clear();
        int numPoints;
        file >> numPoints;

        for (int i = 0; i < numPoints; ++i) {
            int id, x, y;
            file >> id >> x >> y;
            points_.push_back({x, y});
        }
    }

    void ReadConnections(std::ifstream& file) {
        connections_.clear();
        int numConnections;
        file >> numConnections;

        for (int i = 0; i < numConnections; ++i) {
            int numPointsInConnection;
            file >> numPointsInConnection;

            std::vector<int> connection;
            for (int j = 0; j < numPointsInConnection; ++j) {
                int pointIndex;
                file >> pointIndex;
                connection.push_back(pointIndex);
            }

            connections_.push_back(connection);
        }
    }

    std::string filename_;
    std::vector<std::pair<int, int>> points_;
    std::vector<std::vector<int>> connections_;
};

int main() {
    ShapeAnalyzer shapeAnalyzer("input.txt"); //insted of 'input.txt' we have to give file path
    shapeAnalyzer.ReadData();

    double largestArea = shapeAnalyzer.CalculateLargestArea();
    std::cout << "Largest Area: " << largestArea << std::endl;

    int pointToRemove = shapeAnalyzer.FindPointToRemoveForLargestArea();
    if (pointToRemove != -1) {
        std::cout << "Remove point " << pointToRemove << " to get the largest area." << std::endl;
    } else {
        std::cout << "No point to remove for the largest area." << std::endl;
    }

    std::pair<int, int> equidistantPoint = shapeAnalyzer.CalculateEquidistantPoint();
    std::cout << "Equidistant Point: (" << equidistantPoint.first << ", " << equidistantPoint.second << ")" << std::endl;

    return 0;
}
